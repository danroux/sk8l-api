apiVersion: apps/v1
kind: Deployment
metadata:
  name: sk8l-ui
  labels:
    app: sk8l
  namespace: {{ .Values.namespace.name | default "sk8l" | quote }}
spec:
  {{- if .Values.sk8lApi.autoscaling.enabled }}
  replicas: {{ .Values.sk8lApi.autoscaling.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/pod: sk8l-ui
  {{- with .Values.updateStrategy }}
  strategy:
    {{ toYaml . | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/pod: sk8l-ui
        app.kubernetes.io/name: sk8l
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/ConfigMap.yaml") . | sha256sum }}
    spec:
      hostname: sk8l-ui
      subdomain: sk8l
      automountServiceAccountToken: false
      serviceAccountName: {{ .Values.serviceAccount.metadata.name | default "sk8l" }}
      {{- template "securityContext.pod" . }}
        runAsGroup: {{ .Values.envoyGid | default 101 }}
        runAsUser: {{ .Values.envoyUid | default 101 }}
      initContainers:
        - name: replace-env-vars
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            capabilities:
              drop: ['ALL']
            seccompProfile:
              type: RuntimeDefault
          {{- $uiImage := .Values.sk8lUi.image | default "danroux/sk8l-ui" }}
          {{- $uiTag := .Values.sk8lUi.imageTag | default "v0.13.0" }}
          image: {{ printf "%s:%s" $uiImage $uiTag }}
          imagePullPolicy: {{ .Values.sk8lUi.imagePullPolicy | default "IfNotPresent" | quote }}
          command:
            - /app_tmp/replace-env-vars.sh
          envFrom:
            - configMapRef:
                name: sk8l-ui-configmap
          volumeMounts:
            - name: app-dir
              mountPath: /app
      containers:
        - name: envoy
          {{- template "securityContext.container" . }}
          image: {{ .Values.envoy.image | default "envoyproxy/envoy:v1.30-latest" | quote }}
          imagePullPolicy: IfNotPresent
          ports:
            {{- with (index .Values.uiService) }}
            - name: envoy-port
              protocol: TCP
              containerPort: {{ (index .ports 1).port }}
            {{- end }}
            {{- with (index .Values.uiService) }}
            - name: envoy-adm-port
              protocol: TCP
              containerPort: {{ (index .ports 2).port }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: envoy-config
              mountPath: /etc/envoy
              readOnly: true
            - name: tls-certs
              mountPath: /etc/sk8l-certs
              readOnly: true
            # - mountPath: /etc/ssl/certs/
            #   name: ca-certificate
              readOnly: true
            {{- if .Values.envoy.volumeMounts }}
            {{- toYaml .Values.envoy.volumeMounts | nindent 12 }}
            {{- end }}
        - name: sk8l-ui
          {{- template "securityContext.container" . }}
          {{- $uiImage := .Values.sk8lUi.image | default "danroux/sk8l-ui" }}
          {{- $uiTag := .Values.sk8lUi.imageTag | default "v0.13.0" }}
          image: {{ printf "%s:%s" $uiImage $uiTag }}
          imagePullPolicy: {{ .Values.sk8lUi.imagePullPolicy | default "IfNotPresent" | quote }}
          ports:
            {{- with (index .Values.uiService) }}
            - name: sk8l-ui-port
              protocol: TCP
              containerPort: {{ (index .ports 0).port }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          readinessProbe:
            httpGet:
              path: /
              {{- with (index .Values.uiService) }}
              port: {{ (index .ports 0).port }}
              scheme: HTTPS
              {{- end }}
            initialDelaySeconds: 30
            periodSeconds: 120
          envFrom:
            - configMapRef:
                name: sk8l-ui-configmap
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
            - name: tls-certs
              mountPath: /etc/sk8l-certs
              readOnly: true
            # - mountPath: /etc/ssl/certs/
            #   name: ca-certificate
              readOnly: true
            {{- if .Values.sk8lUi.volumeMounts }}
            {{- toYaml .Values.sk8lUi.volumeMounts | nindent 12 }}
            {{ end }}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: envoy-config
          configMap:
            name: envoy-configmap
        - name: nginx-config
          projected:
            sources:
              - configMap:
                  name: nginx-configmap
        - name: tls-certs
          projected:
            sources:
            - secret:
                name: sk8l-server-cert-secret
                items:
                  - key: tls.crt
                    path: server-cert.pem
                  - key: tls.key
                    path: server-key.pem
            - secret:
                name: sk8l-ca-root-cert-secret
                items:
                  - key: tls.crt
                    path: ca-cert.pem
        {{- if .Values.sk8lUi.volumes }}
        {{- toYaml .Values.sk8lUi.volumes | nindent 8 }}
        {{ end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
