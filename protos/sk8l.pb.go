// Copyright 2023 DR
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.24.3
// source: sk8l.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v11 "k8s.io/api/batch/v1"
	v12 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CronjobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CronjobsRequest) Reset() {
	*x = CronjobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronjobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronjobsRequest) ProtoMessage() {}

func (x *CronjobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronjobsRequest.ProtoReflect.Descriptor instead.
func (*CronjobsRequest) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{0}
}

type CronjobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronjobName      string `protobuf:"bytes,1,opt,name=cronjobName,proto3" json:"cronjobName,omitempty"`
	CronjobNamespace string `protobuf:"bytes,2,opt,name=cronjobNamespace,proto3" json:"cronjobNamespace,omitempty"`
}

func (x *CronjobRequest) Reset() {
	*x = CronjobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronjobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronjobRequest) ProtoMessage() {}

func (x *CronjobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronjobRequest.ProtoReflect.Descriptor instead.
func (*CronjobRequest) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{1}
}

func (x *CronjobRequest) GetCronjobName() string {
	if x != nil {
		return x.CronjobName
	}
	return ""
}

func (x *CronjobRequest) GetCronjobNamespace() string {
	if x != nil {
		return x.CronjobNamespace
	}
	return ""
}

type CronjobPodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronjobName      string `protobuf:"bytes,1,opt,name=cronjobName,proto3" json:"cronjobName,omitempty"`
	CronjobNamespace string `protobuf:"bytes,2,opt,name=cronjobNamespace,proto3" json:"cronjobNamespace,omitempty"`
}

func (x *CronjobPodsRequest) Reset() {
	*x = CronjobPodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronjobPodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronjobPodsRequest) ProtoMessage() {}

func (x *CronjobPodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronjobPodsRequest.ProtoReflect.Descriptor instead.
func (*CronjobPodsRequest) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{2}
}

func (x *CronjobPodsRequest) GetCronjobName() string {
	if x != nil {
		return x.CronjobName
	}
	return ""
}

func (x *CronjobPodsRequest) GetCronjobNamespace() string {
	if x != nil {
		return x.CronjobNamespace
	}
	return ""
}

type JobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JobsRequest) Reset() {
	*x = JobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobsRequest) ProtoMessage() {}

func (x *JobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobsRequest.ProtoReflect.Descriptor instead.
func (*JobsRequest) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{3}
}

type JobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName      string `protobuf:"bytes,1,opt,name=jobName,proto3" json:"jobName,omitempty"`
	JobNamespace string `protobuf:"bytes,2,opt,name=jobNamespace,proto3" json:"jobNamespace,omitempty"`
}

func (x *JobRequest) Reset() {
	*x = JobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRequest) ProtoMessage() {}

func (x *JobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRequest.ProtoReflect.Descriptor instead.
func (*JobRequest) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{4}
}

func (x *JobRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *JobRequest) GetJobNamespace() string {
	if x != nil {
		return x.JobNamespace
	}
	return ""
}

type PodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodName      string `protobuf:"bytes,1,opt,name=podName,proto3" json:"podName,omitempty"`
	PodNamespace string `protobuf:"bytes,2,opt,name=podNamespace,proto3" json:"podNamespace,omitempty"`
}

func (x *PodRequest) Reset() {
	*x = PodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodRequest) ProtoMessage() {}

func (x *PodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodRequest.ProtoReflect.Descriptor instead.
func (*PodRequest) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{5}
}

func (x *PodRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *PodRequest) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

type DashboardAnnotationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DashboardAnnotationsRequest) Reset() {
	*x = DashboardAnnotationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardAnnotationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardAnnotationsRequest) ProtoMessage() {}

func (x *DashboardAnnotationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardAnnotationsRequest.ProtoReflect.Descriptor instead.
func (*DashboardAnnotationsRequest) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{6}
}

type DashboardAnnotationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Annotations string `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *DashboardAnnotationsResponse) Reset() {
	*x = DashboardAnnotationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardAnnotationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardAnnotationsResponse) ProtoMessage() {}

func (x *DashboardAnnotationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardAnnotationsResponse.ProtoReflect.Descriptor instead.
func (*DashboardAnnotationsResponse) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{7}
}

func (x *DashboardAnnotationsResponse) GetAnnotations() string {
	if x != nil {
		return x.Annotations
	}
	return ""
}

type CronjobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cronjobs   []*CronjobResponse `protobuf:"bytes,5,rep,name=cronjobs,proto3" json:"cronjobs,omitempty"`
	ActiveJobs []*JobResponse     `protobuf:"bytes,4,rep,name=activeJobs,json=active_jobs,proto3" json:"activeJobs,omitempty"`
	JobsPods   []*PodResponse     `protobuf:"bytes,3,rep,name=jobsPods,json=jobs_pods,proto3" json:"jobsPods,omitempty"`
}

func (x *CronjobsResponse) Reset() {
	*x = CronjobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronjobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronjobsResponse) ProtoMessage() {}

func (x *CronjobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronjobsResponse.ProtoReflect.Descriptor instead.
func (*CronjobsResponse) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{8}
}

func (x *CronjobsResponse) GetCronjobs() []*CronjobResponse {
	if x != nil {
		return x.Cronjobs
	}
	return nil
}

func (x *CronjobsResponse) GetActiveJobs() []*JobResponse {
	if x != nil {
		return x.ActiveJobs
	}
	return nil
}

func (x *CronjobsResponse) GetJobsPods() []*PodResponse {
	if x != nil {
		return x.JobsPods
	}
	return nil
}

type JobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata          *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec              *v11.JobSpec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	JobStatus         *v11.JobStatus `protobuf:"bytes,3,opt,name=jobStatus,proto3" json:"jobStatus,omitempty"` // remove?
	Name              string         `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Namespace         string         `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	CreationTimestamp string         `protobuf:"bytes,6,opt,name=creationTimestamp,json=creation_timestamp,proto3" json:"creationTimestamp,omitempty"`
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uuid                  string               `protobuf:"bytes,7,opt,name=Uuid,json=uid,proto3" json:"Uuid,omitempty"`
	Generation            int64                `protobuf:"varint,8,opt,name=generation,proto3" json:"generation,omitempty"`
	Duration              string               `protobuf:"bytes,9,opt,name=duration,proto3" json:"duration,omitempty"`
	DurationInS           int64                `protobuf:"varint,10,opt,name=durationInS,json=duration_in_s,proto3" json:"durationInS,omitempty"`
	Status                *JobStatus           `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Succeeded             bool                 `protobuf:"varint,12,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Failed                bool                 `protobuf:"varint,13,opt,name=failed,json=failure,proto3" json:"failed,omitempty"`
	FailureCondition      *v11.JobCondition    `protobuf:"bytes,14,opt,name=failureCondition,json=failure_condition,proto3" json:"failureCondition,omitempty"`
	Pods                  []*PodResponse       `protobuf:"bytes,15,rep,name=pods,proto3" json:"pods,omitempty"`
	TerminationReasons    []*TerminationReason `protobuf:"bytes,16,rep,name=terminationReasons,json=termination_reasons,proto3" json:"terminationReasons,omitempty"`
	WithSidecarContainers bool                 `protobuf:"varint,17,opt,name=withSidecarContainers,json=with_sidecar_containers,proto3" json:"withSidecarContainers,omitempty"`
}

func (x *JobResponse) Reset() {
	*x = JobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResponse) ProtoMessage() {}

func (x *JobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResponse.ProtoReflect.Descriptor instead.
func (*JobResponse) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{9}
}

func (x *JobResponse) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JobResponse) GetSpec() *v11.JobSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *JobResponse) GetJobStatus() *v11.JobStatus {
	if x != nil {
		return x.JobStatus
	}
	return nil
}

func (x *JobResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *JobResponse) GetCreationTimestamp() string {
	if x != nil {
		return x.CreationTimestamp
	}
	return ""
}

func (x *JobResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *JobResponse) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *JobResponse) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *JobResponse) GetDurationInS() int64 {
	if x != nil {
		return x.DurationInS
	}
	return 0
}

func (x *JobResponse) GetStatus() *JobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *JobResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *JobResponse) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *JobResponse) GetFailureCondition() *v11.JobCondition {
	if x != nil {
		return x.FailureCondition
	}
	return nil
}

func (x *JobResponse) GetPods() []*PodResponse {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *JobResponse) GetTerminationReasons() []*TerminationReason {
	if x != nil {
		return x.TerminationReasons
	}
	return nil
}

func (x *JobResponse) GetWithSidecarContainers() bool {
	if x != nil {
		return x.WithSidecarContainers
	}
	return false
}

type JobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs []*JobResponse `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *JobsResponse) Reset() {
	*x = JobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobsResponse) ProtoMessage() {}

func (x *JobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobsResponse.ProtoReflect.Descriptor instead.
func (*JobsResponse) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{10}
}

func (x *JobsResponse) GetJobs() []*JobResponse {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type CronjobYAMLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cronjob string `protobuf:"bytes,1,opt,name=cronjob,proto3" json:"cronjob,omitempty"`
}

func (x *CronjobYAMLResponse) Reset() {
	*x = CronjobYAMLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronjobYAMLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronjobYAMLResponse) ProtoMessage() {}

func (x *CronjobYAMLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronjobYAMLResponse.ProtoReflect.Descriptor instead.
func (*CronjobYAMLResponse) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{11}
}

func (x *CronjobYAMLResponse) GetCronjob() string {
	if x != nil {
		return x.Cronjob
	}
	return ""
}

type JobYAMLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job string `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *JobYAMLResponse) Reset() {
	*x = JobYAMLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobYAMLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobYAMLResponse) ProtoMessage() {}

func (x *JobYAMLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobYAMLResponse.ProtoReflect.Descriptor instead.
func (*JobYAMLResponse) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{12}
}

func (x *JobYAMLResponse) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

type PodYAMLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pod string `protobuf:"bytes,1,opt,name=pod,proto3" json:"pod,omitempty"`
}

func (x *PodYAMLResponse) Reset() {
	*x = PodYAMLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodYAMLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodYAMLResponse) ProtoMessage() {}

func (x *PodYAMLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodYAMLResponse.ProtoReflect.Descriptor instead.
func (*PodYAMLResponse) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{13}
}

func (x *PodYAMLResponse) GetPod() string {
	if x != nil {
		return x.Pod
	}
	return ""
}

type PodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata             *v1.ObjectMeta        `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec                 *v12.PodSpec          `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status               *v12.PodStatus        `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Phase                string                `protobuf:"bytes,4,opt,name=phase,proto3" json:"phase,omitempty"`
	TerminatedContainers *TerminatedContainers `protobuf:"bytes,5,opt,name=terminatedContainers,json=terminated_containers,proto3" json:"terminatedContainers,omitempty"`
	FailedContainers     *TerminatedContainers `protobuf:"bytes,6,opt,name=failedContainers,json=failed_containers,proto3" json:"failedContainers,omitempty"`
	Failed               bool                  `protobuf:"varint,7,opt,name=failed,proto3" json:"failed,omitempty"`
	TerminationReasons   []*TerminationReason  `protobuf:"bytes,8,rep,name=terminationReasons,json=termination_reasons,proto3" json:"terminationReasons,omitempty"`
	FinishedAt           *v1.Time              `protobuf:"bytes,9,opt,name=FinishedAt,json=finished_at,proto3" json:"FinishedAt,omitempty"`
}

func (x *PodResponse) Reset() {
	*x = PodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodResponse) ProtoMessage() {}

func (x *PodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodResponse.ProtoReflect.Descriptor instead.
func (*PodResponse) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{14}
}

func (x *PodResponse) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PodResponse) GetSpec() *v12.PodSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *PodResponse) GetStatus() *v12.PodStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PodResponse) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *PodResponse) GetTerminatedContainers() *TerminatedContainers {
	if x != nil {
		return x.TerminatedContainers
	}
	return nil
}

func (x *PodResponse) GetFailedContainers() *TerminatedContainers {
	if x != nil {
		return x.FailedContainers
	}
	return nil
}

func (x *PodResponse) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *PodResponse) GetTerminationReasons() []*TerminationReason {
	if x != nil {
		return x.TerminationReasons
	}
	return nil
}

func (x *PodResponse) GetFinishedAt() *v1.Time {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

type ContainerCommands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands []string `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *ContainerCommands) Reset() {
	*x = ContainerCommands{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCommands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCommands) ProtoMessage() {}

func (x *ContainerCommands) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCommands.ProtoReflect.Descriptor instead.
func (*ContainerCommands) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{15}
}

func (x *ContainerCommands) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

type ContainerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *v12.ContainerStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Phase            string               `protobuf:"bytes,2,opt,name=phase,proto3" json:"phase,omitempty"`
	Conditions       []*v12.PodCondition  `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	TerminatedReason *TerminationReason   `protobuf:"bytes,4,opt,name=terminatedReason,proto3" json:"terminatedReason,omitempty"`
}

func (x *ContainerResponse) Reset() {
	*x = ContainerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerResponse) ProtoMessage() {}

func (x *ContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerResponse.ProtoReflect.Descriptor instead.
func (*ContainerResponse) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{16}
}

func (x *ContainerResponse) GetStatus() *v12.ContainerStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ContainerResponse) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *ContainerResponse) GetConditions() []*v12.PodCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *ContainerResponse) GetTerminatedReason() *TerminationReason {
	if x != nil {
		return x.TerminatedReason
	}
	return nil
}

type TerminationReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminationDetails *v12.ContainerStateTerminated `protobuf:"bytes,1,opt,name=terminationDetails,proto3" json:"terminationDetails,omitempty"`
	ContainerName      string                        `protobuf:"bytes,2,opt,name=containerName,json=container_name,proto3" json:"containerName,omitempty"`
}

func (x *TerminationReason) Reset() {
	*x = TerminationReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminationReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminationReason) ProtoMessage() {}

func (x *TerminationReason) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminationReason.ProtoReflect.Descriptor instead.
func (*TerminationReason) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{17}
}

func (x *TerminationReason) GetTerminationDetails() *v12.ContainerStateTerminated {
	if x != nil {
		return x.TerminationDetails
	}
	return nil
}

func (x *TerminationReason) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

type TerminatedContainers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitContainers      []*ContainerResponse `protobuf:"bytes,1,rep,name=initContainers,json=init_containers,proto3" json:"initContainers,omitempty"`
	Containers          []*ContainerResponse `protobuf:"bytes,2,rep,name=containers,proto3" json:"containers,omitempty"`
	EphemeralContainers []*ContainerResponse `protobuf:"bytes,3,rep,name=ephemeralContainers,json=ephemeral_containers,proto3" json:"ephemeralContainers,omitempty"`
	TerminationReasons  []*TerminationReason `protobuf:"bytes,4,rep,name=terminationReasons,json=termination_reasons,proto3" json:"terminationReasons,omitempty"`
}

func (x *TerminatedContainers) Reset() {
	*x = TerminatedContainers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminatedContainers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminatedContainers) ProtoMessage() {}

func (x *TerminatedContainers) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminatedContainers.ProtoReflect.Descriptor instead.
func (*TerminatedContainers) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{18}
}

func (x *TerminatedContainers) GetInitContainers() []*ContainerResponse {
	if x != nil {
		return x.InitContainers
	}
	return nil
}

func (x *TerminatedContainers) GetContainers() []*ContainerResponse {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *TerminatedContainers) GetEphemeralContainers() []*ContainerResponse {
	if x != nil {
		return x.EphemeralContainers
	}
	return nil
}

func (x *TerminatedContainers) GetTerminationReasons() []*TerminationReason {
	if x != nil {
		return x.TerminationReasons
	}
	return nil
}

type CronjobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace          string                        `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uid                string                        `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	ContainerCommands  map[string]*ContainerCommands `protobuf:"bytes,4,rep,name=containerCommands,json=container_commands,proto3" json:"containerCommands,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreationTimestamp  string                        `protobuf:"bytes,5,opt,name=creationTimestamp,json=creation_timestamp,proto3" json:"creationTimestamp,omitempty"`
	Definition         string                        `protobuf:"bytes,6,opt,name=definition,proto3" json:"definition,omitempty"`
	LastSuccessfulTime string                        `protobuf:"bytes,7,opt,name=lastSuccessfulTime,json=last_successful_time,proto3" json:"lastSuccessfulTime,omitempty"`
	LastScheduleTime   string                        `protobuf:"bytes,8,opt,name=lastScheduleTime,json=last_schedule_time,proto3" json:"lastScheduleTime,omitempty"`
	Active             bool                          `protobuf:"varint,10,opt,name=active,proto3" json:"active,omitempty"`
	Jobs               []*JobResponse                `protobuf:"bytes,11,rep,name=jobs,proto3" json:"jobs,omitempty"`
	RunningJobs        []*JobResponse                `protobuf:"bytes,12,rep,name=runningJobs,json=running_jobs,proto3" json:"runningJobs,omitempty"`
	RunningJobsPods    []*PodResponse                `protobuf:"bytes,13,rep,name=runningJobsPods,json=running_jobs_pods,proto3" json:"runningJobsPods,omitempty"`
	JobsPods           []*PodResponse                `protobuf:"bytes,14,rep,name=jobsPods,json=jobs_pods,proto3" json:"jobsPods,omitempty"`
	LastDuration       int64                         `protobuf:"varint,15,opt,name=lastDuration,json=last_duration,proto3" json:"lastDuration,omitempty"`
	CurrentDuration    int64                         `protobuf:"varint,16,opt,name=currentDuration,json=current_duration,proto3" json:"currentDuration,omitempty"`
	Spec               *v11.CronJobSpec              `protobuf:"bytes,17,opt,name=spec,proto3" json:"spec,omitempty"`
	Failed             bool                          `protobuf:"varint,18,opt,name=failed,proto3" json:"failed,omitempty"`
}

func (x *CronjobResponse) Reset() {
	*x = CronjobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronjobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronjobResponse) ProtoMessage() {}

func (x *CronjobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronjobResponse.ProtoReflect.Descriptor instead.
func (*CronjobResponse) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{19}
}

func (x *CronjobResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CronjobResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CronjobResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CronjobResponse) GetContainerCommands() map[string]*ContainerCommands {
	if x != nil {
		return x.ContainerCommands
	}
	return nil
}

func (x *CronjobResponse) GetCreationTimestamp() string {
	if x != nil {
		return x.CreationTimestamp
	}
	return ""
}

func (x *CronjobResponse) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *CronjobResponse) GetLastSuccessfulTime() string {
	if x != nil {
		return x.LastSuccessfulTime
	}
	return ""
}

func (x *CronjobResponse) GetLastScheduleTime() string {
	if x != nil {
		return x.LastScheduleTime
	}
	return ""
}

func (x *CronjobResponse) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *CronjobResponse) GetJobs() []*JobResponse {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *CronjobResponse) GetRunningJobs() []*JobResponse {
	if x != nil {
		return x.RunningJobs
	}
	return nil
}

func (x *CronjobResponse) GetRunningJobsPods() []*PodResponse {
	if x != nil {
		return x.RunningJobsPods
	}
	return nil
}

func (x *CronjobResponse) GetJobsPods() []*PodResponse {
	if x != nil {
		return x.JobsPods
	}
	return nil
}

func (x *CronjobResponse) GetLastDuration() int64 {
	if x != nil {
		return x.LastDuration
	}
	return 0
}

func (x *CronjobResponse) GetCurrentDuration() int64 {
	if x != nil {
		return x.CurrentDuration
	}
	return 0
}

func (x *CronjobResponse) GetSpec() *v11.CronJobSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CronjobResponse) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

type CronjobPodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pods    []*PodResponse   `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
	Cronjob *CronjobResponse `protobuf:"bytes,2,opt,name=cronjob,proto3" json:"cronjob,omitempty"`
}

func (x *CronjobPodsResponse) Reset() {
	*x = CronjobPodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronjobPodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronjobPodsResponse) ProtoMessage() {}

func (x *CronjobPodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronjobPodsResponse.ProtoReflect.Descriptor instead.
func (*CronjobPodsResponse) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{20}
}

func (x *CronjobPodsResponse) GetPods() []*PodResponse {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *CronjobPodsResponse) GetCronjob() *CronjobResponse {
	if x != nil {
		return x.Cronjob
	}
	return nil
}

type JobList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*v11.Job `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
}

func (x *JobList) Reset() {
	*x = JobList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobList) ProtoMessage() {}

func (x *JobList) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobList.ProtoReflect.Descriptor instead.
func (*JobList) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{21}
}

func (x *JobList) GetItems() []*v11.Job {
	if x != nil {
		return x.Items
	}
	return nil
}

type MappedJobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// google.protobuf.ListValue Jobs = 1;
	JobLists map[string]*JobList `protobuf:"bytes,1,rep,name=JobLists,proto3" json:"JobLists,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MappedJobs) Reset() {
	*x = MappedJobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sk8l_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MappedJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappedJobs) ProtoMessage() {}

func (x *MappedJobs) ProtoReflect() protoreflect.Message {
	mi := &file_sk8l_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappedJobs.ProtoReflect.Descriptor instead.
func (*MappedJobs) Descriptor() ([]byte, []int) {
	return file_sk8l_proto_rawDescGZIP(), []int{22}
}

func (x *MappedJobs) GetJobLists() map[string]*JobList {
	if x != nil {
		return x.JobLists
	}
	return nil
}

var File_sk8l_proto protoreflect.FileDescriptor

var file_sk8l_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x73, 0x6b,
	0x38, 0x6c, 0x1a, 0x34, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x73, 0x6b, 0x38, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x11, 0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x0e, 0x43, 0x72, 0x6f, 0x6e, 0x6a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x6f,
	0x6e, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x62, 0x0a, 0x12, 0x43, 0x72, 0x6f, 0x6e, 0x6a,
	0x6f, 0x62, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x6f, 0x6e, 0x6a,
	0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x4a,
	0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x0a, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4a, 0x0a, 0x0a, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x40, 0x0a, 0x1c, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x72, 0x6f, 0x6e,
	0x6a, 0x6f, 0x62, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6b, 0x38,
	0x6c, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x12,
	0x2e, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x73, 0x50, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x22,
	0xff, 0x05, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x3c, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x2d, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x11,
	0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12,
	0x17, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x50, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x12,
	0x48, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6b,
	0x38, 0x6c, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x15, 0x77, 0x69, 0x74,
	0x68, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x22, 0x35, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0x2f, 0x0a, 0x13, 0x43, 0x72, 0x6f, 0x6e,
	0x6a, 0x6f, 0x62, 0x59, 0x41, 0x4d, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x22, 0x23, 0x0a, 0x0f, 0x4a, 0x6f, 0x62,
	0x59, 0x41, 0x4d, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x23,
	0x0a, 0x0f, 0x50, 0x6f, 0x64, 0x59, 0x41, 0x4d, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x70, 0x6f, 0x64, 0x22, 0xa2, 0x04, 0x0a, 0x0b, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x14, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x15, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x47, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6b, 0x38,
	0x6c, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x48, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x2f, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x11, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x5c, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x14, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a,
	0x0e, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f,
	0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x65, 0x70, 0x68, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14,
	0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0xc2,
	0x06, 0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6a, 0x6f,
	0x62, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6a, 0x6f, 0x62,
	0x73, 0x12, 0x34, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x50, 0x6f, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x11, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62,
	0x73, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x73, 0x50, 0x6f,
	0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e,
	0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x6a, 0x6f, 0x62,
	0x73, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x1a, 0x5d, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x6d, 0x0a, 0x13, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x50, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x6f,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e,
	0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x64,
	0x73, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x6a,
	0x6f, 0x62, 0x22, 0x39, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x94, 0x01,
	0x0a, 0x0a, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x3a, 0x0a, 0x08,
	0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73,
	0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x1a, 0x4a, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x6b, 0x38,
	0x6c, 0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x32, 0x96, 0x04, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62,
	0x12, 0x3e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x73, 0x12,
	0x15, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x43, 0x72,
	0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x3b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x12, 0x14,
	0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x43, 0x72, 0x6f, 0x6e,
	0x6a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x47, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x50, 0x6f, 0x64, 0x73, 0x12,
	0x18, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x50, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x6b, 0x38, 0x6c,
	0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x32, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x73, 0x12, 0x11, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x4a, 0x6f, 0x62, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x59, 0x41, 0x4d, 0x4c, 0x12, 0x14, 0x2e, 0x73,
	0x6b, 0x38, 0x6c, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f,
	0x62, 0x59, 0x41, 0x4d, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x59, 0x41, 0x4d, 0x4c, 0x12, 0x10, 0x2e, 0x73, 0x6b,
	0x38, 0x6c, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x4a, 0x6f, 0x62, 0x59, 0x41, 0x4d, 0x4c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x59, 0x41,
	0x4d, 0x4c, 0x12, 0x10, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x50, 0x6f, 0x64, 0x59,
	0x41, 0x4d, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x73, 0x6b, 0x38, 0x6c, 0x2e, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x6b, 0x38, 0x6c,
	0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sk8l_proto_rawDescOnce sync.Once
	file_sk8l_proto_rawDescData = file_sk8l_proto_rawDesc
)

func file_sk8l_proto_rawDescGZIP() []byte {
	file_sk8l_proto_rawDescOnce.Do(func() {
		file_sk8l_proto_rawDescData = protoimpl.X.CompressGZIP(file_sk8l_proto_rawDescData)
	})
	return file_sk8l_proto_rawDescData
}

var file_sk8l_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_sk8l_proto_goTypes = []interface{}{
	(*CronjobsRequest)(nil),              // 0: sk8l.CronjobsRequest
	(*CronjobRequest)(nil),               // 1: sk8l.CronjobRequest
	(*CronjobPodsRequest)(nil),           // 2: sk8l.CronjobPodsRequest
	(*JobsRequest)(nil),                  // 3: sk8l.JobsRequest
	(*JobRequest)(nil),                   // 4: sk8l.JobRequest
	(*PodRequest)(nil),                   // 5: sk8l.PodRequest
	(*DashboardAnnotationsRequest)(nil),  // 6: sk8l.DashboardAnnotationsRequest
	(*DashboardAnnotationsResponse)(nil), // 7: sk8l.DashboardAnnotationsResponse
	(*CronjobsResponse)(nil),             // 8: sk8l.CronjobsResponse
	(*JobResponse)(nil),                  // 9: sk8l.JobResponse
	(*JobsResponse)(nil),                 // 10: sk8l.JobsResponse
	(*CronjobYAMLResponse)(nil),          // 11: sk8l.CronjobYAMLResponse
	(*JobYAMLResponse)(nil),              // 12: sk8l.JobYAMLResponse
	(*PodYAMLResponse)(nil),              // 13: sk8l.PodYAMLResponse
	(*PodResponse)(nil),                  // 14: sk8l.PodResponse
	(*ContainerCommands)(nil),            // 15: sk8l.ContainerCommands
	(*ContainerResponse)(nil),            // 16: sk8l.ContainerResponse
	(*TerminationReason)(nil),            // 17: sk8l.TerminationReason
	(*TerminatedContainers)(nil),         // 18: sk8l.TerminatedContainers
	(*CronjobResponse)(nil),              // 19: sk8l.CronjobResponse
	(*CronjobPodsResponse)(nil),          // 20: sk8l.CronjobPodsResponse
	(*JobList)(nil),                      // 21: sk8l.JobList
	(*MappedJobs)(nil),                   // 22: sk8l.MappedJobs
	nil,                                  // 23: sk8l.CronjobResponse.ContainerCommandsEntry
	nil,                                  // 24: sk8l.MappedJobs.JobListsEntry
	(*v1.ObjectMeta)(nil),                // 25: k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	(*v11.JobSpec)(nil),                  // 26: k8s.io.api.batch.v1.JobSpec
	(*v11.JobStatus)(nil),                // 27: k8s.io.api.batch.v1.JobStatus
	(*JobStatus)(nil),                    // 28: sk8l_custom.JobStatus
	(*v11.JobCondition)(nil),             // 29: k8s.io.api.batch.v1.JobCondition
	(*v12.PodSpec)(nil),                  // 30: k8s.io.api.core.v1.PodSpec
	(*v12.PodStatus)(nil),                // 31: k8s.io.api.core.v1.PodStatus
	(*v1.Time)(nil),                      // 32: k8s.io.apimachinery.pkg.apis.meta.v1.Time
	(*v12.ContainerStatus)(nil),          // 33: k8s.io.api.core.v1.ContainerStatus
	(*v12.PodCondition)(nil),             // 34: k8s.io.api.core.v1.PodCondition
	(*v12.ContainerStateTerminated)(nil), // 35: k8s.io.api.core.v1.ContainerStateTerminated
	(*v11.CronJobSpec)(nil),              // 36: k8s.io.api.batch.v1.CronJobSpec
	(*v11.Job)(nil),                      // 37: k8s.io.api.batch.v1.Job
}
var file_sk8l_proto_depIdxs = []int32{
	19, // 0: sk8l.CronjobsResponse.cronjobs:type_name -> sk8l.CronjobResponse
	9,  // 1: sk8l.CronjobsResponse.activeJobs:type_name -> sk8l.JobResponse
	14, // 2: sk8l.CronjobsResponse.jobsPods:type_name -> sk8l.PodResponse
	25, // 3: sk8l.JobResponse.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	26, // 4: sk8l.JobResponse.spec:type_name -> k8s.io.api.batch.v1.JobSpec
	27, // 5: sk8l.JobResponse.jobStatus:type_name -> k8s.io.api.batch.v1.JobStatus
	28, // 6: sk8l.JobResponse.status:type_name -> sk8l_custom.JobStatus
	29, // 7: sk8l.JobResponse.failureCondition:type_name -> k8s.io.api.batch.v1.JobCondition
	14, // 8: sk8l.JobResponse.pods:type_name -> sk8l.PodResponse
	17, // 9: sk8l.JobResponse.terminationReasons:type_name -> sk8l.TerminationReason
	9,  // 10: sk8l.JobsResponse.jobs:type_name -> sk8l.JobResponse
	25, // 11: sk8l.PodResponse.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	30, // 12: sk8l.PodResponse.spec:type_name -> k8s.io.api.core.v1.PodSpec
	31, // 13: sk8l.PodResponse.status:type_name -> k8s.io.api.core.v1.PodStatus
	18, // 14: sk8l.PodResponse.terminatedContainers:type_name -> sk8l.TerminatedContainers
	18, // 15: sk8l.PodResponse.failedContainers:type_name -> sk8l.TerminatedContainers
	17, // 16: sk8l.PodResponse.terminationReasons:type_name -> sk8l.TerminationReason
	32, // 17: sk8l.PodResponse.FinishedAt:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.Time
	33, // 18: sk8l.ContainerResponse.status:type_name -> k8s.io.api.core.v1.ContainerStatus
	34, // 19: sk8l.ContainerResponse.conditions:type_name -> k8s.io.api.core.v1.PodCondition
	17, // 20: sk8l.ContainerResponse.terminatedReason:type_name -> sk8l.TerminationReason
	35, // 21: sk8l.TerminationReason.terminationDetails:type_name -> k8s.io.api.core.v1.ContainerStateTerminated
	16, // 22: sk8l.TerminatedContainers.initContainers:type_name -> sk8l.ContainerResponse
	16, // 23: sk8l.TerminatedContainers.containers:type_name -> sk8l.ContainerResponse
	16, // 24: sk8l.TerminatedContainers.ephemeralContainers:type_name -> sk8l.ContainerResponse
	17, // 25: sk8l.TerminatedContainers.terminationReasons:type_name -> sk8l.TerminationReason
	23, // 26: sk8l.CronjobResponse.containerCommands:type_name -> sk8l.CronjobResponse.ContainerCommandsEntry
	9,  // 27: sk8l.CronjobResponse.jobs:type_name -> sk8l.JobResponse
	9,  // 28: sk8l.CronjobResponse.runningJobs:type_name -> sk8l.JobResponse
	14, // 29: sk8l.CronjobResponse.runningJobsPods:type_name -> sk8l.PodResponse
	14, // 30: sk8l.CronjobResponse.jobsPods:type_name -> sk8l.PodResponse
	36, // 31: sk8l.CronjobResponse.spec:type_name -> k8s.io.api.batch.v1.CronJobSpec
	14, // 32: sk8l.CronjobPodsResponse.pods:type_name -> sk8l.PodResponse
	19, // 33: sk8l.CronjobPodsResponse.cronjob:type_name -> sk8l.CronjobResponse
	37, // 34: sk8l.JobList.Items:type_name -> k8s.io.api.batch.v1.Job
	24, // 35: sk8l.MappedJobs.JobLists:type_name -> sk8l.MappedJobs.JobListsEntry
	15, // 36: sk8l.CronjobResponse.ContainerCommandsEntry.value:type_name -> sk8l.ContainerCommands
	21, // 37: sk8l.MappedJobs.JobListsEntry.value:type_name -> sk8l.JobList
	0,  // 38: sk8l.Cronjob.GetCronjobs:input_type -> sk8l.CronjobsRequest
	1,  // 39: sk8l.Cronjob.GetCronjob:input_type -> sk8l.CronjobRequest
	2,  // 40: sk8l.Cronjob.GetCronjobPods:input_type -> sk8l.CronjobPodsRequest
	3,  // 41: sk8l.Cronjob.GetJobs:input_type -> sk8l.JobsRequest
	1,  // 42: sk8l.Cronjob.GetCronjobYAML:input_type -> sk8l.CronjobRequest
	4,  // 43: sk8l.Cronjob.GetJobYAML:input_type -> sk8l.JobRequest
	5,  // 44: sk8l.Cronjob.GetPodYAML:input_type -> sk8l.PodRequest
	6,  // 45: sk8l.Cronjob.GetDashboardAnnotations:input_type -> sk8l.DashboardAnnotationsRequest
	8,  // 46: sk8l.Cronjob.GetCronjobs:output_type -> sk8l.CronjobsResponse
	19, // 47: sk8l.Cronjob.GetCronjob:output_type -> sk8l.CronjobResponse
	20, // 48: sk8l.Cronjob.GetCronjobPods:output_type -> sk8l.CronjobPodsResponse
	10, // 49: sk8l.Cronjob.GetJobs:output_type -> sk8l.JobsResponse
	11, // 50: sk8l.Cronjob.GetCronjobYAML:output_type -> sk8l.CronjobYAMLResponse
	12, // 51: sk8l.Cronjob.GetJobYAML:output_type -> sk8l.JobYAMLResponse
	13, // 52: sk8l.Cronjob.GetPodYAML:output_type -> sk8l.PodYAMLResponse
	7,  // 53: sk8l.Cronjob.GetDashboardAnnotations:output_type -> sk8l.DashboardAnnotationsResponse
	46, // [46:54] is the sub-list for method output_type
	38, // [38:46] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_sk8l_proto_init() }
func file_sk8l_proto_init() {
	if File_sk8l_proto != nil {
		return
	}
	file_sk8l_custom_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sk8l_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronjobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronjobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronjobPodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardAnnotationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardAnnotationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronjobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronjobYAMLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobYAMLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodYAMLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCommands); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminationReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminatedContainers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronjobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronjobPodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sk8l_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MappedJobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sk8l_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sk8l_proto_goTypes,
		DependencyIndexes: file_sk8l_proto_depIdxs,
		MessageInfos:      file_sk8l_proto_msgTypes,
	}.Build()
	File_sk8l_proto = out.File
	file_sk8l_proto_rawDesc = nil
	file_sk8l_proto_goTypes = nil
	file_sk8l_proto_depIdxs = nil
}
