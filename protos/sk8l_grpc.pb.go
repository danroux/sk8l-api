// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CronjobClient is the client API for Cronjob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CronjobClient interface {
	GetCronjobs(ctx context.Context, in *CronjobsRequest, opts ...grpc.CallOption) (*CronjobsResponse, error)
	GetCronjob(ctx context.Context, in *CronjobRequest, opts ...grpc.CallOption) (*CronjobResponse, error)
	GetCronjobPods(ctx context.Context, in *CronjobPodsRequest, opts ...grpc.CallOption) (*CronjobPodsResponse, error)
	GetCronjobYAML(ctx context.Context, in *CronjobRequest, opts ...grpc.CallOption) (*CronjobYAMLResponse, error)
	GetJobYAML(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobYAMLResponse, error)
	GetPodYAML(ctx context.Context, in *PodRequest, opts ...grpc.CallOption) (*PodYAMLResponse, error)
}

type cronjobClient struct {
	cc grpc.ClientConnInterface
}

func NewCronjobClient(cc grpc.ClientConnInterface) CronjobClient {
	return &cronjobClient{cc}
}

func (c *cronjobClient) GetCronjobs(ctx context.Context, in *CronjobsRequest, opts ...grpc.CallOption) (*CronjobsResponse, error) {
	out := new(CronjobsResponse)
	err := c.cc.Invoke(ctx, "/sk8l.Cronjob/GetCronjobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronjobClient) GetCronjob(ctx context.Context, in *CronjobRequest, opts ...grpc.CallOption) (*CronjobResponse, error) {
	out := new(CronjobResponse)
	err := c.cc.Invoke(ctx, "/sk8l.Cronjob/GetCronjob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronjobClient) GetCronjobPods(ctx context.Context, in *CronjobPodsRequest, opts ...grpc.CallOption) (*CronjobPodsResponse, error) {
	out := new(CronjobPodsResponse)
	err := c.cc.Invoke(ctx, "/sk8l.Cronjob/GetCronjobPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronjobClient) GetCronjobYAML(ctx context.Context, in *CronjobRequest, opts ...grpc.CallOption) (*CronjobYAMLResponse, error) {
	out := new(CronjobYAMLResponse)
	err := c.cc.Invoke(ctx, "/sk8l.Cronjob/GetCronjobYAML", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronjobClient) GetJobYAML(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobYAMLResponse, error) {
	out := new(JobYAMLResponse)
	err := c.cc.Invoke(ctx, "/sk8l.Cronjob/GetJobYAML", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronjobClient) GetPodYAML(ctx context.Context, in *PodRequest, opts ...grpc.CallOption) (*PodYAMLResponse, error) {
	out := new(PodYAMLResponse)
	err := c.cc.Invoke(ctx, "/sk8l.Cronjob/GetPodYAML", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronjobServer is the server API for Cronjob service.
// All implementations must embed UnimplementedCronjobServer
// for forward compatibility
type CronjobServer interface {
	GetCronjobs(context.Context, *CronjobsRequest) (*CronjobsResponse, error)
	GetCronjob(context.Context, *CronjobRequest) (*CronjobResponse, error)
	GetCronjobPods(context.Context, *CronjobPodsRequest) (*CronjobPodsResponse, error)
	GetCronjobYAML(context.Context, *CronjobRequest) (*CronjobYAMLResponse, error)
	GetJobYAML(context.Context, *JobRequest) (*JobYAMLResponse, error)
	GetPodYAML(context.Context, *PodRequest) (*PodYAMLResponse, error)
	mustEmbedUnimplementedCronjobServer()
}

// UnimplementedCronjobServer must be embedded to have forward compatible implementations.
type UnimplementedCronjobServer struct {
}

func (UnimplementedCronjobServer) GetCronjobs(context.Context, *CronjobsRequest) (*CronjobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronjobs not implemented")
}
func (UnimplementedCronjobServer) GetCronjob(context.Context, *CronjobRequest) (*CronjobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronjob not implemented")
}
func (UnimplementedCronjobServer) GetCronjobPods(context.Context, *CronjobPodsRequest) (*CronjobPodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronjobPods not implemented")
}
func (UnimplementedCronjobServer) GetCronjobYAML(context.Context, *CronjobRequest) (*CronjobYAMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronjobYAML not implemented")
}
func (UnimplementedCronjobServer) GetJobYAML(context.Context, *JobRequest) (*JobYAMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobYAML not implemented")
}
func (UnimplementedCronjobServer) GetPodYAML(context.Context, *PodRequest) (*PodYAMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodYAML not implemented")
}
func (UnimplementedCronjobServer) mustEmbedUnimplementedCronjobServer() {}

// UnsafeCronjobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CronjobServer will
// result in compilation errors.
type UnsafeCronjobServer interface {
	mustEmbedUnimplementedCronjobServer()
}

func RegisterCronjobServer(s grpc.ServiceRegistrar, srv CronjobServer) {
	s.RegisterService(&Cronjob_ServiceDesc, srv)
}

func _Cronjob_GetCronjobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronjobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronjobServer).GetCronjobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sk8l.Cronjob/GetCronjobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronjobServer).GetCronjobs(ctx, req.(*CronjobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cronjob_GetCronjob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronjobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronjobServer).GetCronjob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sk8l.Cronjob/GetCronjob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronjobServer).GetCronjob(ctx, req.(*CronjobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cronjob_GetCronjobPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronjobPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronjobServer).GetCronjobPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sk8l.Cronjob/GetCronjobPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronjobServer).GetCronjobPods(ctx, req.(*CronjobPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cronjob_GetCronjobYAML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronjobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronjobServer).GetCronjobYAML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sk8l.Cronjob/GetCronjobYAML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronjobServer).GetCronjobYAML(ctx, req.(*CronjobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cronjob_GetJobYAML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronjobServer).GetJobYAML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sk8l.Cronjob/GetJobYAML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronjobServer).GetJobYAML(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cronjob_GetPodYAML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronjobServer).GetPodYAML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sk8l.Cronjob/GetPodYAML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronjobServer).GetPodYAML(ctx, req.(*PodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cronjob_ServiceDesc is the grpc.ServiceDesc for Cronjob service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cronjob_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sk8l.Cronjob",
	HandlerType: (*CronjobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCronjobs",
			Handler:    _Cronjob_GetCronjobs_Handler,
		},
		{
			MethodName: "GetCronjob",
			Handler:    _Cronjob_GetCronjob_Handler,
		},
		{
			MethodName: "GetCronjobPods",
			Handler:    _Cronjob_GetCronjobPods_Handler,
		},
		{
			MethodName: "GetCronjobYAML",
			Handler:    _Cronjob_GetCronjobYAML_Handler,
		},
		{
			MethodName: "GetJobYAML",
			Handler:    _Cronjob_GetJobYAML_Handler,
		},
		{
			MethodName: "GetPodYAML",
			Handler:    _Cronjob_GetPodYAML_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sk8l.proto",
}
